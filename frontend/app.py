import streamlit as st
import requests
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os
import openai
import pandas as pd
from openai import OpenAI
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
from pypdf import PdfReader  # Leitor de PDF
import streamlit as st 

# --- Configura√ß√£o da p√°gina ---
st.set_page_config(page_title="EnergyTime", page_icon="logo_energytime.png", layout="wide")

# --- Sidebar ---
st.sidebar.image("logo_energytime.png", width=100)
st.sidebar.title("EnergyTime")  

paginas = st.sidebar.radio(
    "", 
    [ "üîå Equipamentos GoodWe", "üí° Assistente Alexa", "üí¨ IA Personalizada"]
)

st.sidebar.markdown("---")

# Conte√∫do principal

if paginas == "üîå Equipamentos GoodWe":

    st.title("Equipamentos GoodWe")

    # ===========================
    # FUN√á√ÉO 1: RELAT√ìRIO MENSAL DA BATERIA
    # ===========================
    def show_battery_data_monthly():
        """Processa e exibe o Relat√≥rio Mensal da Bateria."""
        file_path = 'content/BaseDeDados_BATERIA_MENSAL.xls'
        try:
            df = pd.read_excel(file_path, engine="xlrd", header=None)
        except FileNotFoundError:
            st.error(f"ERRO: O arquivo '{file_path}' (Mensal) n√£o foi encontrado. Verifique o caminho.")
            return
        
        # Processamento e Limpeza
        df.columns = [
            "Monthly Report", "Plant", "Classification", "Capacity(kW)", "PV(kWh)", 
            "Sell(kWh)", "Buy(kWh)", "Consumption(kWh)", "In-House(kWh)", 
            "Self-Cons. Ratio(%)", "Contribution Ratio(%)", "Income(EUR)"
        ]
        df = df.iloc[20:-1].copy()
        cols_to_convert = ['Consumption(kWh)', 'PV(kWh)', 'Income(EUR)', 'Buy(kWh)', 'Sell(kWh)']
        for col in cols_to_convert:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        df.dropna(subset=cols_to_convert + ['Monthly Report'], inplace=True)
        df['Monthly Report'] = pd.to_datetime(df['Monthly Report'], format='%d.%m.%Y', errors='coerce')

        # C√°lculos
        total_monthly_consumption_bat = df['Consumption(kWh)'].sum()
        number_of_days_bat = len(df)
        daily_average_consumption_bat = total_monthly_consumption_bat / number_of_days_bat
        total_income_bat = df['Income(EUR)'].sum()
        total_monthly_buy = df['Buy(kWh)'].sum()
        total_monthly_sell = df['Sell(kWh)'].sum()
        daily_average_buy = total_monthly_buy / number_of_days_bat
        daily_average_sell = total_monthly_sell / number_of_days_bat

        # Gr√°fico
        st.subheader("üìä Gera√ß√£o Solar x Consumo da Bateria (Mensal)")
        df_indexed = df.set_index("Monthly Report")
        st.line_chart(df_indexed[["PV(kWh)", "Consumption(kWh)"]])

        # M√©tricas
        st.subheader("‚ö° M√©tricas de Desempenho")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Consumo Mensal Total", f"{total_monthly_consumption_bat:,.2f} kWh")
            st.metric("Consumo M√©dio Di√°rio", f"{daily_average_consumption_bat:,.2f} kWh")
        with col2:
            st.metric("Renda Mensal Total", f"{total_income_bat:,.2f} EUR")
            st.metric("Energia Total Vendida", f"{total_monthly_sell:,.2f} kWh")
        with col3:
            st.metric("Energia Total Comprada", f"{total_monthly_buy:,.2f} kWh")
            st.metric("Energia M√©dia Di√°ria Comprada", f"{daily_average_buy:,.2f} kWh")
            st.write(f"‚ö° Energia M√©dia Di√°ria Vendida: **{daily_average_sell:.2f} kWh**")

    # ===========================
    # FUN√á√ÉO 2: RELAT√ìRIO DI√ÅRIO DA BATERIA
    # ===========================
    def show_battery_data_daily():
        st.header("Relat√≥rio Di√°rio")
        file_path_daily = 'content/BaseDeDados_BATERIA_DIARIA.xls'
        try:
            df_daily = pd.read_excel(file_path_daily, engine="xlrd", header=None)
        except FileNotFoundError:
            st.error(f"ERRO: O arquivo '{file_path_daily}' (Di√°rio) n√£o foi encontrado. Verifique o caminho.")
            return

        # Exemplo de simula√ß√£o ‚Äî substituir pelos dados reais depois
        st.subheader("üìä Consumo x Gera√ß√£o (Di√°rio)")
        data_exemplo = pd.DataFrame({
            'Dia': pd.to_datetime(['2025-01-01', '2025-01-02', '2025-01-03']),
            'Gera√ß√£o': [10.5, 12.1, 9.8],
            'Consumo': [8.0, 7.5, 8.5]
        })
        df_indexed = data_exemplo.set_index("Dia")
        st.line_chart(df_indexed[["Gera√ß√£o", "Consumo"]])

        # Totais
        total_daily_generation = data_exemplo['Gera√ß√£o'].sum()
        total_daily_consumption = data_exemplo['Consumo'].sum()
        st.subheader("‚ö° Totais Di√°rios")
        colA, colB = st.columns(2)
        with colA:
            st.metric("Consumo Total", f"{total_daily_consumption:.2f} kWh")
        with colB:
            st.metric("Gera√ß√£o Total", f"{total_daily_generation:.2f} kWh")

    # ===========================
    # FUN√á√ÉO 3: RELAT√ìRIO MENSAL DO INVERSOR
    # ===========================
    def show_inverter_data_monthly():
        """Processa e exibe o Relat√≥rio Mensal do Inversor GoodWe."""
        file_path = 'content/BaseDeDados_INVERSOR_MENSAL.xls'
        try:
            df = pd.read_excel(file_path, engine="xlrd", header=None)
        except FileNotFoundError:
            st.error(f"ERRO: O arquivo '{file_path}' (Mensal do Inversor) n√£o foi encontrado.")
            return

        # Processamento
        df.columns = ["Monthly Report", "Plant", "Classification", "Capacity(kW)", "Generation(kWh)", "Income(EUR)"]
        df = df.iloc[21:-1].copy()
        for col in ["Generation(kWh)", "Income(EUR)"]:
            df[col] = pd.to_numeric(df[col].astype(str).str.replace(",", "."), errors="coerce")
        df.dropna(subset=["Monthly Report", "Generation(kWh)", "Income(EUR)"], inplace=True)
        df["Monthly Report"] = pd.to_datetime(df["Monthly Report"], format="%d.%m.%Y", errors="coerce")

        # C√°lculos
        total_generation = df["Generation(kWh)"].sum()
        total_income = df["Income(EUR)"].sum()
        num_days = len(df)
        daily_avg_generation = total_generation / num_days if num_days > 0 else 0.0

        # Gr√°fico
        st.subheader("üìä Gera√ß√£o Mensal do Inversor")
        df_indexed = df.set_index("Monthly Report")
        st.line_chart(df_indexed["Generation(kWh)"])

        # M√©tricas
        st.subheader("‚ö° Totais e M√©dias")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Gera√ß√£o Total", f"{total_generation:,.2f} kWh")
        with col2:
            st.metric("Gera√ß√£o M√©dia Di√°ria", f"{daily_avg_generation:,.2f} kWh")
        with col3:
            st.metric("Renda Total", f"{total_income:,.2f} EUR")

    # ===========================
    # ESTRUTURA PRINCIPAL COM EXPANDERS
    # ===========================
    with st.expander("Inversor", expanded=True):
        st.header("Relat√≥rios Detalhados do Inversor")
        show_inverter_data_monthly()

    st.markdown("---")

    with st.expander("Bateria", expanded=True):
        st.header("Relat√≥rios Detalhados da Bateria")
        with st.expander("Relat√≥rio Mensal", expanded=True):
            show_battery_data_monthly()
        st.markdown("---")
        with st.expander("Relat√≥rio Di√°rio"):
            show_battery_data_daily()

    st.markdown("---")
    st.markdown("### ‚ö° Previs√£o de Queda de Energia")
    col5, col6 = st.columns(2)
    with col5:
        st.metric(label="Hoje", value="N√£o", delta="Baseado em an√°lise clim√°tica")
    with col6:
        st.metric(label="Amanh√£", value="Sim", delta="Baseado em an√°lise clim√°tica")


elif paginas == "üí° Assistente Alexa":

    URL_BACKEND = "https://energytime-challenge-01.onrender.com/historico"  # ajustar no deploy

    # Dicion√°rio para traduzir intents em frases
    INTENT_MAP = {
        "LaunchRequest": "Abrir a skill da Alexa",
        "CheckWeatherIntent": "Quero saber a previs√£o de queda de energia",
        "GetStateIntent": "Estou em {estado}",
        "CheckInversorIntent": "Quero saber os dados do inversor",
        "StartChargingIntent": "Ligue o carregador",
        "StopChargingIntent": "Desligue o carregador"
    }

    st.set_page_config(page_title="Hist√≥rico Alexa", layout="wide")

    # Estilo das mensagens
    user_bg = "background-color:#1e3a8a; color:white; padding:10px; border-radius:10px; margin:5px;"
    alexa_bg = "background-color:#0f172a; color:white; padding:10px; border-radius:10px; margin:5px; font-style:italic; font-weight:400;"

    st.title("üí¨ Hist√≥rico de Intera√ß√µes Alexa")
    st.markdown("---")

    # Fun√ß√£o para traduzir intent para frase de usu√°rio
    def traduzir_entrada(entrada):
        # Caso seja s√≥ string (ex: "CheckWeatherIntent")
        if isinstance(entrada, str):
            return INTENT_MAP.get(entrada, entrada)

        # Caso seja dict (ex: {"GetStateIntent": {"estado": "s√£o paulo"}})
        elif isinstance(entrada, dict):
            intent_name, slots = list(entrada.items())[0]
            frase = INTENT_MAP.get(intent_name, intent_name)

            # Substitui placeholders pelos valores dos slots
            if isinstance(slots, dict):
                for k, v in slots.items():
                    frase = frase.replace(f"{{{k}}}", v)
            return frase

        # Fallback
        return str(entrada)

    try:
        response = requests.get(URL_BACKEND)
        if response.status_code == 200:
            historico = response.json()
        else:
            historico = []
    except Exception as e:
        st.error(f"Erro ao conectar com o backend: {e}")
        historico = []

    if not historico:
        st.info("Nenhuma intera√ß√£o registrada ainda.")
    else:
        for registro in historico:
            col1, col2 = st.columns([1,1])

            with col1:
                frase_usuario = traduzir_entrada(registro["entrada"])
                st.markdown(
                    f"<div style='{user_bg}'>üë§ <b>Usu√°rio:</b> {frase_usuario}<br><small>{registro['timestamp']}</small></div>",
                    unsafe_allow_html=True
                )

            with col2:
                st.markdown(
                    f"<div style='{alexa_bg}'>ü§ñ <b>Alexa:</b> {registro['resposta']}</div>",
                    unsafe_allow_html=True
                )

elif paginas == "üí¨ IA Personalizada":
    try:
        client = OpenAI(api_key="")
    except Exception:
        st.error("‚ö†Ô∏è Chave da API OpenAI n√£o encontrada. Adicione-a em .streamlit/secrets.toml.")
        st.stop()

    # ==============================
    # FUN√á√ÉO: GERAR EMBEDDINGS
    # ==============================
    def gerar_embeddings(textos):
        """Gera embeddings para uma lista de textos"""
        if not textos:
            return []
        valid_textos = [str(t) for t in textos if isinstance(t, (str, bytes))]
        if not valid_textos:
            return []

        try:
            response = client.embeddings.create(
                model="text-embedding-3-small",
                input=valid_textos
            )
            return [np.array(r.embedding) for r in response.data]
        except Exception as e:
            st.error(f"Erro ao gerar embeddings: {e}")
            return [None] * len(valid_textos)

    # ==============================
    # BASE DE DADOS DE EXEMPLO E PDF
    # ==============================
    dados_exemplo_dict = {
        "equipamento": [
            "Inversor GW5000",
            "Painel Solar 550W",
            "Bateria Lynx Home U",
            "Inversor ET 10kW",
            "Bateria Lynx Home F Plus"
        ],
        "descricao": [
            "Inversor h√≠brido GoodWe GW5000 de 5kW, alta efici√™ncia, suporte a monitoramento remoto via aplicativo e compat√≠vel com sistemas de baterias residenciais.",
            "M√≥dulo fotovoltaico monocristalino de 550W para gera√ß√£o de energia solar, ideal para sistemas conectados √† rede.",
            "Bateria de l√≠tio GoodWe Lynx Home U, indicada para uso dom√©stico, com prote√ß√£o avan√ßada BMS e design modular para f√°cil expans√£o.",
            "Inversor trif√°sico GoodWe ET de 10kW, projetado para aplica√ß√µes residenciais e comerciais, com suporte a backup de energia e ampla faixa de tens√£o de entrada.",
            "Bateria de l√≠tio GoodWe Lynx Home F Plus, de alta capacidade, adequada para aplica√ß√µes maiores, com alta densidade energ√©tica e vida √∫til estendida"
        ],
        "fonte": ["exemplo", "exemplo", "exemplo", "exemplo", "exemplo"]
    }

    @st.cache_resource
    def load_data(pdf_paths):
        """Carrega dados do dicion√°rio + PDFs"""
        dados = pd.DataFrame(dados_exemplo_dict)

        for pdf_path in pdf_paths:
            novos_dados_lista = []
            try:
                reader = PdfReader(pdf_path)
                for page_num in range(len(reader.pages)):
                    text = reader.pages[page_num].extract_text()
                    if text:
                        chunks = [text[i:i + 1000] for i in range(0, len(text), 1000)]
                        for chunk in chunks:
                            novos_dados_lista.append({
                                "equipamento": f"PDF_{os.path.basename(pdf_path)}",
                                "descricao": chunk,
                                "fonte": pdf_path
                            })
            except FileNotFoundError:
                st.warning(f"üìÇ Arquivo PDF n√£o encontrado: {pdf_path}")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erro ao processar {pdf_path}: {e}")

            if novos_dados_lista:
                novos_dados_df = pd.DataFrame(novos_dados_lista)
                dados = pd.concat([dados, novos_dados_df], ignore_index=True)

        # Embeddings
        dados["embedding"] = gerar_embeddings(dados["descricao"].tolist())
        dados.dropna(subset=["embedding"], inplace=True)
        dados.reset_index(drop=True, inplace=True)
        return dados

    # Arquivos de exemplo
    pdf_paths = [
        "content/GW_Commercial & Industrial Smart Inverter Solutions_User Manual-ET 15-30kW-PT.pdf",
        "content/GW_Residential Smart Inverter Solutions_User Manual-ES Uniq 3-6kW-PT.pdf"
    ]
    dados = load_data(pdf_paths)

    # ==============================
    # FUN√á√ÉO: BUSCA (RAG)
    # ==============================
    def buscar_contexto(pergunta, top_k=3):
        """Busca contexto relevante com embeddings"""
        if dados.empty:
            return "Nenhuma informa√ß√£o dispon√≠vel na base de dados."

        valid_embeddings_df = dados[dados["embedding"].apply(lambda x: isinstance(x, np.ndarray))]
        if valid_embeddings_df.empty:
            return "Nenhuma informa√ß√£o √∫til (embeddings ausentes)."

        emb_pergunta_list = gerar_embeddings([pergunta])
        if not emb_pergunta_list or emb_pergunta_list[0] is None:
            return "N√£o foi poss√≠vel gerar embedding para a pergunta."
        emb_pergunta = emb_pergunta_list[0]

        sims = cosine_similarity([emb_pergunta], valid_embeddings_df["embedding"].tolist())[0]
        indices = np.argsort(sims)[::-1][:top_k]

        return "\n".join(valid_embeddings_df.iloc[indices]["descricao"].tolist())

    # ==============================
    # FUN√á√ÉO: CHAT
    # ==============================
    def chat_ia(pergunta):
        pergunta_lower = pergunta.lower()

        if "produtos goodwe" in pergunta_lower or "equipamentos goodwe" in pergunta_lower:
            return "Aqui est√£o alguns dos equipamentos GoodWe que conhe√ßo:\n" + "\n".join(dados_exemplo_dict["equipamento"])

        contexto = buscar_contexto(pergunta)
        prompt = f"""
        Voc√™ √© um assistente especialista em energia solar e equipamentos GoodWe.
        Use o contexto abaixo para responder de forma clara e confi√°vel.

        Contexto:
        {contexto}

        Pergunta:
        {pergunta}
        """

        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}]
            )
            return response.choices[0].message.content
        except Exception as e:
            st.error(f"Erro no chat: {e}")
            return "‚ö†Ô∏è Ocorreu um erro ao gerar a resposta."

    # ==============================
    # INTERFACE STREAMLIT
    # ==============================
    st.title("ü§ñ Energy_bot - Assistente GoodWe")
    st.write("Pergunte sobre energia solar e equipamentos GoodWe!")

    if "messages" not in st.session_state:
        st.session_state.messages = []

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    if user_input := st.chat_input("Digite sua pergunta..."):
        st.session_state.messages.append({"role": "user", "content": user_input})
        with st.chat_message("user"):
            st.markdown(user_input)

        resposta = chat_ia(user_input)
        st.session_state.messages.append({"role": "assistant", "content": resposta})
        with st.chat_message("assistant"):
            st.markdown(resposta)



