import streamlit as st
import requests
import pandas as pd

st.set_page_config(page_title="EnergyTime", page_icon="logo_energytime.png", layout="wide")

# Sidebar
st.sidebar.image("logo_energytime.png", width=100)
st.sidebar.title("EnergyTime")  

paginas = st.sidebar.radio("", ["‚ò∞ Sobre", "üìä An√°lises", "üîå Equipamentos GoodWe", "üí° Assistente Alexa","üí¨ IA Personalizada", "‚öôÔ∏è Configura√ß√µes"])

st.sidebar.markdown("---")

# Conte√∫do principal
if paginas == "‚ò∞ Sobre":

    st.title("üå± O que √© a EnergyTime?")
    st.markdown("---")

    # Se√ß√£o: Nosso Objetivo
    st.subheader("üìå Nosso Objetivo")
    st.write("""
    A EnergyTime conecta equipamentos de energia com assistentes virtuais, oferecendo ferramentas inovadoras para melhorar a experi√™ncia do usu√°rio.  
    Queremos tornar a tecnologia sustent√°vel acess√≠vel, pr√°tica e intuitiva, mesmo para quem n√£o tem familiaridade com energia ou automa√ß√£o residencial.
    """)
    st.write("""
    Com nossas solu√ß√µes, o usu√°rio ter√° acesso a recursos como:  
    - Previs√£o de quedas de energia usando IA  
    - Controle de dispositivos via Alexa  
    - Respostas personalizadas sobre consumo e efici√™ncia energ√©tica  
    - Entre outros recursos que facilitam a vida no dia a dia
    """)

    # Se√ß√£o: Colabora√ß√£o com a GoodWe
    st.subheader("ü§ù Colabora√ß√£o com a GoodWe")
    st.write("""
    Estamos integrando nossos sistemas com os carregadores, inversores e outros equipamentos da GoodWe, garantindo uma automa√ß√£o inteligente e confi√°vel para o gerenciamento de energia.
    """)

    # Se√ß√£o: Funcionalidades do Projeto
    # Se√ß√£o: Funcionalidades do Projeto
    st.subheader("‚ö° Funcionalidades do Nosso Projeto")
    st.write("""
    A EnergyTime oferece uma experi√™ncia completa para gest√£o de energia de forma pr√°tica e inteligente, tanto pelo site/app quanto pela Alexa. Entre as principais funcionalidades, destacamos:  

    - **Gr√°ficos de energia e cr√©ditos**: acompanhe a energia gerada, consumida e a renda total com cr√©dito da rede, tanto no √∫ltimo dia quanto no √∫ltimo m√™s.  
    - **Monitoramento de equipamentos em tempo real**: veja o status de cada dispositivo da sua casa, como a bateria principal, por exemplo, com a porcentagem de carga atual.  
    - **Previs√£o de quedas de energia**: receba alertas para o dia atual e o pr√≥ximo, garantindo que voc√™ esteja sempre preparado.  
    - **Hist√≥rico de comunica√ß√µes com a Alexa**: consulte todas as intera√ß√µes anteriores, mantendo o controle sobre os comandos e respostas.  
    - **IA personalizada para d√∫vidas e orienta√ß√£o**: converse sobre o funcionamento dos equipamentos e receba informa√ß√µes detalhadas sobre energia e efici√™ncia diretamente no app ou site.
    """)

    # Se√ß√£o: Sobre a Equipe
    st.subheader("üë®‚Äçüíª Sobre a Equipe")
    st.write("""
    Nosso time √© formado por estudantes de Ci√™ncias da Computa√ß√£o apaixonados por tecnologia e sustentabilidade:  
    - Enzo Cerneviva  
    - Gustavo Cordeiro Braga  
    - Murilo Justino Arcanjo  
    - Rafael Quattrer Dalla Costa  
    """)
    st.write("Trabalhamos juntos para aproximar pessoas das tecnologias que tornam a energia mais inteligente e sustent√°vel.")

    st.markdown("---")


    # Tr√™s colunas: logo1 | espa√ßo | logo2
    col1, col2, a, b, c, d, e, f, g = st.columns([1, 1, 1, 1, 1, 1, 1, 1, 1])   

    with col1:
        st.image("logo_energytime.png", width=150)
    with col2:
        st.image("logo_goodwe.png", width=150)


import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Configura√ß√£o da p√°gina
st.set_page_config(layout="centered")
st.title("Equipamentos Goodwe")

# --- FUN√á√ÉO 1: RELAT√ìRIO MENSAL (Seu C√≥digo Original) ---
def show_battery_data_monthly():
    """Processa e exibe o Relat√≥rio Mensal da Bateria."""
    
    file_path = 'BaseDeDados_BATERIA_MENSAL.xls'
    
    try:
        df = pd.read_excel(file_path, engine="xlrd", header=None)
    except FileNotFoundError:
        st.error(f"ERRO: O arquivo '{file_path}' (Mensal) n√£o foi encontrado. Verifique o caminho.")
        return
    
    # Processamento e Limpeza de Dados
    df.columns = ["Monthly Report", "Plant", "Classification", "Capacity(kW)", "PV(kWh)", "Sell(kWh)", "Buy(kWh)", "Consumption(kWh)", "In-House(kWh)", "Self-Cons. Ratio(%)", "Contribution Ratio(%)", "Income(EUR)"]
    df = df.iloc[20:-1].copy()

    cols_to_convert = ['Consumption(kWh)', 'PV(kWh)', 'Income(EUR)', 'Buy(kWh)', 'Sell(kWh)']
    for col in cols_to_convert:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    
    df.dropna(subset=cols_to_convert, inplace=True) 
    
    df['Monthly Report'] = pd.to_datetime(df['Monthly Report'], format='%d.%m.%Y', errors='coerce')
    df.dropna(subset=['Monthly Report'], inplace=True)
    
    # C√°lculos
    total_monthly_consumption_bat = df['Consumption(kWh)'].sum()
    number_of_days_bat = len(df)
    daily_average_consumption_bat = total_monthly_consumption_bat / number_of_days_bat
    total_income_bat = df['Income(EUR)'].sum()
    total_monthly_buy = df['Buy(kWh)'].sum()
    total_monthly_sell = df['Sell(kWh)'].sum()
    daily_average_buy = total_monthly_buy / number_of_days_bat
    daily_average_sell = total_monthly_sell / number_of_days_bat

    # Exibi√ß√£o do Gr√°fico
    st.subheader("Gr√°fico de Consumo e Produ√ß√£o (Mensal)")
    fig, ax = plt.subplots(figsize=(10, 5))
    sns.lineplot(data=df, x='Monthly Report', y='Consumption(kWh)', label='Consumo (Bateria)', ax=ax)
    sns.lineplot(data=df, x='Monthly Report', y='PV(kWh)', label='Produ√ß√£o (Bateria)', ax=ax)
    ax.set_xlabel('Data')
    ax.set_ylabel('Valor (kWh)')
    ax.set_title('Consumo e Produ√ß√£o da Bateria (Dados Mensais)')
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig) 

    # Exibi√ß√£o das M√©tricas
    st.subheader("M√©tricas de Desempenho")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Consumo Mensal Total", f"{total_monthly_consumption_bat:,.2f} kWh")
        st.metric("Consumo M√©dio Di√°rio", f"{daily_average_consumption_bat:,.2f} kWh")

    with col2:
        st.metric("Renda Mensal Total", f"{total_income_bat:,.2f} EUR")
        st.metric("Energia Total Vendida", f"{total_monthly_sell:,.2f} kWh")
        
    with col3:
        st.metric("Energia Total Comprada", f"{total_monthly_buy:,.2f} kWh")
        st.metric("Energia M√©dia Di√°ria Comprada", f"{daily_average_buy:,.2f} kWh")
        st.write(f"Energia M√©dia Di√°ria Vendida: **{daily_average_sell:.2f} kWh**")


# --- FUN√á√ÉO 2: RELAT√ìRIO DI√ÅRIO (ADAPTE SEU C√ìDIGO AQUI) ---
def show_battery_data_daily():
    """
    Processa e exibe o Relat√≥rio Di√°rio da Bateria.
    
    NOTA: O C√ìDIGO ABAIXO √â UM EXEMPLO GEN√âRICO. VOC√ä DEVE SUBSTITU√ç-LO
    INTEIRAMENTE PELO SEU C√ìDIGO DE PROCESSAMENTO DO RELAT√ìRIO DI√ÅRIO.
    """
    st.header("Relat√≥rio Di√°rio")
    
    file_path_daily = 'BaseDeDados_BATERIA_DIARIA.xls'
    
    try:
        # Tenta carregar o arquivo di√°rio
        df_daily = pd.read_excel(file_path_daily, engine="xlrd", header=None)
    except FileNotFoundError:
        st.error(f"ERRO: O arquivo '{file_path_daily}' (Di√°rio) n√£o foi encontrado. Verifique o caminho.")
        return
    
    # --------------------------------------------------------
    # *** SUBSTITUA ESTA SE√á√ÉO PELO SEU C√ìDIGO DE PROCESSAMENTO DI√ÅRIO! ***
    # --------------------------------------------------------
    st.info("Aqui entrar√° o seu **c√≥digo completo de processamento de dados di√°rios**, incluindo limpeza, c√°lculos, e as chamadas do Streamlit (`st.pyplot`, `st.metric`, etc.) para exibir os resultados.")
    st.markdown("Exemplo de como ficaria a exibi√ß√£o de dados e gr√°ficos:")
    
    # Exemplo: Simula√ß√£o de Gr√°fico Di√°rio
    st.subheader("Gr√°fico de Exemplo (Di√°rio)")
    data_exemplo = pd.DataFrame({
        'Dia': pd.to_datetime(['2025-01-01', '2025-01-02', '2025-01-03']),
        'Gera√ß√£o': [10.5, 12.1, 9.8],
        'Consumo': [8.0, 7.5, 8.5]
    })
    
    fig_daily, ax_daily = plt.subplots(figsize=(10, 5))
    sns.lineplot(data=data_exemplo, x='Dia', y='Gera√ß√£o', label='Gera√ß√£o', ax=ax_daily)
    sns.lineplot(data=data_exemplo, x='Dia', y='Consumo', label='Consumo', ax=ax_daily)
    ax_daily.set_title('Consumo e Produ√ß√£o da Bateria (Dados Di√°rios - Simula√ß√£o)')
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig_daily)
    # --------------------------------------------------------


# --- ESTRUTURA PRINCIPAL COM OS EXPANDERS (O Layout do "V") ---

# 1. EXPANDER PRINCIPAL PARA O INVERSOR
with st.expander("Inversor"):
    # Espa√ßo para o Inversor (voc√™ pode colocar relat√≥rios Mensal/Di√°rio aqui tamb√©m)
    st.subheader("Dados do inversor aqui")
    st.info("Coloque a chamada para o relat√≥rio do Inversor aqui.")

st.markdown("---") 

# 2. EXPANDER PRINCIPAL PARA A BATERIA
with st.expander("Bateria", expanded=True): # Inicia ABERTO para a Bateria, como na imagem
    
    st.header("Relat√≥rios Detalhados da Bateria")
    
    # EXPANDER ANINHADO 1: RELAT√ìRIO MENSAL
    with st.expander("Relat√≥rio Mensal", expanded=True): # Inicia ABERTO
        show_battery_data_monthly()

    st.markdown("---") # Linha divis√≥ria
    
    # EXPANDER ANINHADO 2: RELAT√ìRIO DI√ÅRIO
    with st.expander("Relat√≥rio Di√°rio"): # Inicia FECHADO
        show_battery_data_daily()
    
    st.markdown("""  
  """)
    st.markdown("---")

    st.markdown("### ‚ö° Previs√£o de Queda de Energia")


    col5, col6 = st.columns(2)

    with col5:
        st.metric(label="Hoje", value="N√£o", delta="Baseado em an√°lise clim√°tica")

    with col6:
        st.metric(label="Amanh√£", value="Sim", delta="Baseado em an√°lise clim√°tica")


elif paginas == "üí° Assistente Alexa":

    URL_BACKEND = "https://energytime-challenge-01.onrender.com/historico"  # ajustar no deploy

    # Dicion√°rio para traduzir intents em frases
    INTENT_MAP = {
        "LaunchRequest": "Abrir a skill da Alexa",
        "CheckWeatherIntent": "Quero saber a previs√£o de queda de energia",
        "GetStateIntent": "Estou em {estado}",
        "CheckInversorIntent": "Quero saber os dados do inversor",
        "StartChargingIntent": "Ligue o carregador",
        "StopChargingIntent": "Desligue o carregador"
    }

    st.set_page_config(page_title="Hist√≥rico Alexa", layout="wide")

    # Estilo das mensagens
    user_bg = "background-color:#1e3a8a; color:white; padding:10px; border-radius:10px; margin:5px;"
    alexa_bg = "background-color:#0f172a; color:white; padding:10px; border-radius:10px; margin:5px; font-style:italic; font-weight:400;"

    st.title("üí¨ Hist√≥rico de Intera√ß√µes Alexa")
    st.markdown("---")

    # Fun√ß√£o para traduzir intent para frase de usu√°rio
    def traduzir_entrada(entrada):
        # Caso seja s√≥ string (ex: "CheckWeatherIntent")
        if isinstance(entrada, str):
            return INTENT_MAP.get(entrada, entrada)

        # Caso seja dict (ex: {"GetStateIntent": {"estado": "s√£o paulo"}})
        elif isinstance(entrada, dict):
            intent_name, slots = list(entrada.items())[0]
            frase = INTENT_MAP.get(intent_name, intent_name)

            # Substitui placeholders pelos valores dos slots
            if isinstance(slots, dict):
                for k, v in slots.items():
                    frase = frase.replace(f"{{{k}}}", v)
            return frase

        # Fallback
        return str(entrada)

    try:
        response = requests.get(URL_BACKEND)
        if response.status_code == 200:
            historico = response.json()
        else:
            historico = []
    except Exception as e:
        st.error(f"Erro ao conectar com o backend: {e}")
        historico = []

    if not historico:
        st.info("Nenhuma intera√ß√£o registrada ainda.")
    else:
        for registro in historico:
            col1, col2 = st.columns([1,1])

            with col1:
                frase_usuario = traduzir_entrada(registro["entrada"])
                st.markdown(
                    f"<div style='{user_bg}'>üë§ <b>Usu√°rio:</b> {frase_usuario}<br><small>{registro['timestamp']}</small></div>",
                    unsafe_allow_html=True
                )

            with col2:
                st.markdown(
                    f"<div style='{alexa_bg}'>ü§ñ <b>Alexa:</b> {registro['resposta']}</div>",
                    unsafe_allow_html=True
                )

elif paginas == "üí¨ IA Personalizada":

    st.title("Converse com a IA sobre qualquer d√∫vida sobre energia ou sobre os equipamentos")

elif paginas == "‚öôÔ∏è Configura√ß√µes":

    st.title("‚öôÔ∏è Ajustes do sistema")

